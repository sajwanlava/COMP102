#BlueJ class context
comment0.params=
comment0.target=MiniPaint()
comment0.text=Sets\ up\ the\ user\ interface\ -\ mouselistener\ and\ buttons
comment1.params=
comment1.target=boolean\ fill()
comment2.params=action\ x\ y
comment2.target=void\ doMouse(java.lang.String,\ double,\ double)
comment2.text=\r\n\ Respond\ to\ mouse\ events\r\n\ When\ pressed,\ remember\ the\ position.\r\n\ When\ released,\ draw\ the\ current\ shape\ using\ the\ pressed\ position\r\n\ \ and\ the\ released\ position.\r\n\ Uses\ the\ value\ in\ the\ field\ to\ determine\ which\ kind\ of\ shape\ to\ draw.\r\n\ Although\ you\ could\ do\ all\ the\ drawing\ in\ this\ method,\r\n\ \ it\ may\ be\ better\ to\ call\ some\ helper\ methods\ for\ the\ more\r\n\ \ complex\ actions\ (and\ then\ define\ the\ helper\ methods\!)\r\n
comment3.params=
comment3.target=void\ line()
comment3.text=\ Helper\ methods\ for\ drawing\ the\ shapes,\ if\ you\ choose\ to\ define\ them\ \r\n\ \ \ \ I\ used\ the\ following\ methods\:\r\n\r\n\ \ \ \ public\ void\ drawARectangle(double\ x,\ double\ y)\r\n\ \ \ \ //\ draws\ a\ Rectangle\ between\ the\ mouse\ pressed\ and\ mouse\ released\ points.\r\n\r\n\ \ \ \ public\ void\ drawAnOval(double\ x,\ double\ y)\r\n\ \ \ \ //\ draws\ a\ Rectangle\ between\ the\ mouse\ pressed\ and\ mouse\ released\ points.\r\n\r\n\ \ \ \ public\ void\ drawAnImage(double\ x,\ double\ y)\r\n\ \ \ \ //\ draws\ an\ image\ at\ the\ mouse\ released\ point.\r\n\r\n
comment4.params=
comment4.target=void\ rect()
comment5.params=
comment5.target=void\ image()
comment6.params=
comment6.target=void\ color()
comment7.params=
comment7.target=void\ oval()
comment8.params=arguments
comment8.target=void\ main(java.lang.String[])
comment8.text=\#\ YOUR\ CODE\ HERE
numComments=9
